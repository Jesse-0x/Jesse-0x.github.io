[{"title":"Google CTF 2022 Write Ups","url":"/2022/07/05/","content":"\n<!-- more -->\n"},{"title":"PicoCTF 2022 Write Ups","url":"/2022/03/26/","content":"\n<!-- more -->\n"},{"title":"Three.js Application Test","url":"/2022/03/26/","content":"\n# Three.js Application Test\n\nThis is a demo of the Three.js. Fully Front end.\n\n<!-- more -->\n","tags":["Resource & Share","Projects & Tools"],"categories":["Web Application","JavaScript","Three.js"]},{"title":"spotDL","url":"/2021/06/15/","content":"\n# [spotDL](https://github.com/spotDL/spotify-downloader)\n\nDownload your Spotify playlists and songs along with album art and metadata\n\n<!-- more -->\n\n![image](https://raw.githubusercontent.com/spotDL/spotify-downloader/master/docs/static/logo-transparent.png)\n\n> README.MD form [GitHub](https://github.com/spotDL/spotify-downloader)\n\n<div align=\"center\">\n\n\n\n[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?style=flat-square&color=44CC11)](https://github.com/spotDL/spotify-downloader/blob/master/LICENSE)[![pypi version](https://img.shields.io/pypi/pyversions/spotDL?color=%2344CC11&style=flat-square)](https://pypi.org/project/spotdl/) [![GitHub commits since latest release (by date)](https://img.shields.io/github/commits-since/spotDL/spotify-downloader/latest?color=44CC11&style=flat-square)![pypi downloads](https://img.shields.io/pypi/dw/spotDL?label=downloads@pypi&color=344CC11&style=flat-square)](https://pypi.org/project/spotdl/) [![Contributors](https://img.shields.io/github/contributors/spotDL/spotify-downloader?style=flat-square)![Discord](https://img.shields.io/discord/771628785447337985?label=discord&logo=discord&style=flat-square)](https://discord.gg/xCa23pwJWY)\n\n</div>\n\n> The fastest, easiest, and most accurate command-line music downloader\n\n[![asciicast](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG.svg)](https://asciinema.org/a/wDNFL5XGhdadUK2EnOkv46YMG)\n\n## What spotDL does\n\n1. Downloads music from YouTube as an MP3 file\n2. Applies basic metadata gathered from Spotify such as:\n    - Track Name\n    - Track Number\n    - Album\n    - Album Cover\n    - Genre\n    - and more!\n\n### Redesigned\n\nspotDL is being redesigned! This means we are currently not accepting new feature requests. You can talk to us on [our Discord](https://discord.gg/xCa23pwJWY) if there is anything further.\n\n## Prerequisites\n\n- Python 3.6.1 or above (added to PATH)\n- FFmpeg 4.2 or above (added to PATH)\n\n> **_YouTube Music must be available in your country for spotDL to work. This is because we use YouTube Music to filter search results. You can check if YouTube Music is available in your country, by visiting [YouTube Music](https://music.youtube.com)._**\n\n## Installation\n\n### Installing FFmpeg\n\n- [Windows Tutorial](https://windowsloop.com/install-ffmpeg-windows-10/)\n- OSX - `brew install ffmpeg`\n- Linux - `sudo apt install ffmpeg`\n\n### Installing spotDL\n\n- Recommended Stable Version:\n\n    ```bash\n    pip install spotdl\n    ```\n\n- Dev Version: **(NOT STABLE)**\n\n    ```bash\n    pip install https://codeload.github.com/spotDL/spotify-downloader/zip/dev\n    ```\n\nIf you have trouble installing spotdl take a look at the extended installation guide\n[here](/docs/INSTALLATION.md) or ask for help in our\n[discord server](https://discord.gg/xCa23pwJWY)\n\n#### On Termux\n\n```bash\ncurl -L https://raw.githubusercontent.com/spotDL/spotify-downloader/master/termux/setup_spotdl.sh | sh\n```\n\n#### Arch\n\nThere is an Arch User Repository (AUR) package for [spotDL](https://aur.archlinux.org/packages/python-spotdl/).\n\n## Usage\n\n- #### To download a song, run\n\n    ```bash\n    spotdl [trackUrl]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b\n    ```\n\n- #### To download an album, run\n\n    ```bash\n    spotdl [albumUrl]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/album/4yP0hdKOZPNshxUOjY0cZj\n    ```\n\n- #### To download a playlist, run\n\n    ```bash\n    spotdl [playlistUrl]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID\n    ```\n\n- #### To download all songs from an artist run\n\n    ```bash\n    spotdl [artistUrl]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/artist/1fZAAHNWdSM5gqbi9o5iEA\n    ```\n\n- #### To search for and download a song, run, **with quotation marks**\n\n    ```bash\n    spotdl '[songQuery]'\n    ```\n\n    example:\n\n    ```bash\n    spotdl 'The Weeknd - Blinding Lights'\n    ```\n\n    > _Note: This is not accurate and often causes errors._\n\n- #### To resume a failed/incomplete download, run\n\n    ```bash\n    spotdl [pathToTrackingFile]\n    ```\n\n    example:\n\n    ```bash\n    spotdl 'The Weeknd - Blinding Lights.spotdlTrackingFile'\n    ```\n\n    > _Note: `.spotdlTrackingFile`s are automatically created when a download starts and deleted on completion_\n\n- #### You can queue up multiple download tasks by separating the arguments with spaces\n\n    ```bash\n    spotdl [songQuery1] [albumUrl] [songQuery2] ... (order does not matter)\n    ```\n\n    example:\n\n    ```bash\n    spotdl 'The Weeknd - Blinding Lights' https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID ...\n    ```\n\n    > _Note: spotDL downloads up to 4 songs in parallel, so for a faster experience, download albums and playlist, rather than tracks._\n\n- #### To download youtube video with metadata from spotify, run\n\n    ```bash\n    spotdl \"YouTubeURL|SpotifyURL\"\n    ```\n\n    example:\n\n    ```bash\n    spotdl \"https://www.youtube.com/watch?v=EO7XnC1YpVo|https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3\"\n    ```\n\n    > Note: Urls have to be separated with `|` and quoted properly ex. \"YouTubeURL|SpotifyUrl\"\n\n- #### To download songs with different output format run\n\n    ```bash\n    spotdl [songUrl] --output-format mp3/m4a/flac/opus/ogg/wav\n    ```\n\n    example:\n\n    ```bash\n    spotdl [songUrl] --output-format opus\n    ```\n\n- #### To use ffmpeg binary that is not on PATH run\n\n    ```bash\n    spotdl [songUrl] --ffmpeg path/to/your/ffmpeg.exe\n    ```\n\n    example:\n\n    ```bash\n    spotdl [songUrl] --ffmpeg C:\\ffmpeg\\bin\\ffmpeg.exe\n    ```\n\n- #### To generate .m3u file for each playlist run\n\n    ```bash\n    spotdl [playlistUrl] --m3u\n    ```\n\n    example:\n\n    ```bash\n      spotdl https://open.spotify.com/playlist/37i9dQZF1E8UXBoz02kGID --m3u\n    ```\n\n- #### To use youtube instead of youtube music run\n\n    ```bash\n    spotdl [songUrl] --use-youtube\n    ```\n\n    example:\n\n    ```bash\n      spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --use-youtube\n    ```\n\n- #### To manually choose a lyrics provider, run\n  \n    ```bash\n      spotdl [songUrl] --lyrics-provider lyrics_provider\n    ```\n\n    available lyrics providers:\n    - genius\n    - musixmatch\n\n    example:\n\n    ```bash\n      spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --lyrics-provider genius\n    ```\n\n- #### To change number of threads used when downloading songs run\n\n    ```bash\n    spotdl [songUrl] --dt [number]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --dt 8\n    ```\n\n- #### To change number of threads used when searching for songs run\n\n    ```bash\n    spotdl [songUrl] --st [number]\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/track/4fzsfWzRhPawzqhX8Qt9F3 --st 8\n    ```\n\n- #### To ignore your ffmpeg version run\n\n    ```bash\n    spotdl [songUrl] --ignore-ffmpeg-version\n    ```\n\n- #### To use path template\n\n    ```bash\n    spotdl [songUrl] --path-template 'template'\n    ```\n\n    example:\n\n    ```bash\n    spotdl https://open.spotify.com/track/0VjIjW4GlUZAMYd2vXMi3b --path-template '{artist}/{album}/{title} - {artist}.{ext}'\n    ```\n\n    possible values:\n    - {artist}\n    - {artists}\n    - {title}\n    - {album}\n    - {ext}\n    - {playlist}\n\n## `pipx` Isolated Environment Alternative\n\nFor users who are not familiar with `pipx`, it can be used to run scripts **without**\ninstalling the spotDL package and all the dependencies globally with pip. (Effectively\nskipping over the [spotDL Installation](#Installing-spotDL) step)\n\nFirst, you will need to install `pipx` by running:\n\n```bash\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n```\n\nNext, you can jump directly to running spotDL with:\n\n```bash\npipx run spotdl ...\n```\n\n## Contributor Guide\n\nInterested in contributing? Check out our [CONTRIBUTING.md](docs/CONTRIBUTING.md) to find\nresources around contributing along with a guide on how to set up a development\nenvironment.\n\n## Contributors\n\n[![contributors](https://contributors-img.web.app/image?repo=spotdl/spotify-downloader)](https://github.com/spotdl/spotify-downloader/graphs/contributors)\n\n## Authors\n\n1. [@ritiek](https://github.com/ritiek) for creating and maintaining spotDL for 4 years\n2. [@rocketinventor](https://github.com/rocketinventor) for figuring out YouTube Music\n   querying\n3. [@MikhailZex](https://github.com/MikhailZex) for, never mind...\n\n## License\n\n[MIT](/LICENSE)\n"},{"title":"checkra1n","url":"/2021/02/03/","content":"\n# Checkra1n\n\nJailbreak for iPhone 5s through iPhone X, iOS 12.0 and up\n\n<!-- more -->\n\n![image](/images/2021/checker1n.png)\n\n------\n\n## Introduction\n\ncheckra1n is a powerful tool to jailbreak, until now (2021.11.07) it supports all the iOS versions from 12.0.\n\n![main](/images/2021/cher-main.png)\n\nIt looks like this, and the main website is [here](https://checkra.in).\n\nIt is more powerful (of course, you need a computer) than unc0ver and other tools, because it can do more functions, support more devices and the iOS version. However, it is not a perfect jailbreak, that means every time when you restart, it will back to unjailbreak.\n\nIt is based on the '[checkm8](https://twitter.com/axi0mX/status/1177542201670168576)' exploit, an unpatchable bootrom. More tools based on this exploit: [ipwnduf](https://github.com/axi0mX/ipwndfu)(By the original discover person)\n\n## Functions\n\n### GUI memu:\n\nStart: Start jailbreal\n\noptions:verbose boot just will show the log when apple start booting(iboot)\n\n### Terminal Mode:\n\n```\n#\n# Checkra1n beta 0.12.4\n#\n# Proudly written in nano\n# (c) 2019-2021 Kim Jong Cracks\n#\n#========  Made by  =======\n# argp, axi0mx, danyl931, jaywalker, kirb, littlelailo, nitoTV\n# never_released, nullpixel, pimskeks, qwertyoruiop, sbingner, siguza\n#======== Thanks to =======\n# haifisch, jndok, jonseals, xerub, lilstevie, psychotea, sferrini\n# Cellebrite (ih8sn0w, cjori, ronyrus et al.)\n#==========================\n\nUsage: /Applications/checkra1n.app/Contents/MacOS/checkra1n [OPTIONS]\n\n  -h, --help    prints usage information\n\nOptions:\n  --version                           Print version\n  --force-revert                      Force Rootfs Reversion\n  -c, --cli                           Force command line\n  -d, --demote                        Demote\n  -E, --early-exit                    Exits after uploading Pongo\n  -e, --extra-bootargs <BOOTARGS>     Set extra bootargs\n  -g, --gui                           Start a graphical user interface\n  -k, --override-pongo <FILE PATH>    Override pongo image\n  -l, --log-path <FILE PATH>          Log to file\n  -n, --no-colors                     Disable colors on the command line\n  -p, --pongo                         Boots to a Pongo shell\n  -q, --quick                         Enable Quick Mode\n  -s, --safe-mode                     Enter Safe-Mode\n  -t, --tui                           Start a terminal graphical user interface\n  -V, --verbose-boot                  Verbose Boot\n  -v, --verbose-logging               Verbose logging\n  -w, --wui <IPV4> <PORT>             Start webra1n - a web based user interface\n\nEnvironment Variables:\n  CHECKRA1N_VERSION=1                     Print version\n  CHECKRA1N_FORCE_REVERT=1                Force Rootfs Reversion\n  CHECKRA1N_CLI=1                         Force command line\n  CHECKRA1N_DEMOTE=1                      Demote\n  CHECKRA1N_EARLY_EXIT=1                  Exits after uploading Pongo\n  CHECKRA1N_EXTRA_BOOTARGS=<BOOTARGS>     Set extra bootargs\n  CHECKRA1N_GUI=1                         Start a graphical user interface\n  CHECKRA1N_OVERRIDE_PONGO=<FILE PATH>    Override pongo image\n  CHECKRA1N_LOG_PATH=<FILE PATH>          Log to file\n  CHECKRA1N_NO_COLORS=1                   Disable colors on the command line\n  CHECKRA1N_PONGO=1                       Boots to a Pongo shell\n  CHECKRA1N_QUICK=1                       Enable Quick Mode\n  CHECKRA1N_SAFE_MODE=1                   Enter Safe-Mode\n  CHECKRA1N_TUI=1                         Start a terminal graphical user interface\n  CHECKRA1N_VERBOSE_BOOT=1                Verbose Boot\n  CHECKRA1N_VERBOSE_LOGGING=1             Verbose logging\n\n```\n\nOne intersing thing I tested is the [SandCastle](https://github.com/corellium/projectsandcastle) project, which is a project allow to write different Operating systems into iPhone 7/7s. Sadly, it was abandoned.\n\n## Usage\n\n*Please use learning and debugging, do not touch the edge!*\n\n</br>\n\nOpen checkra1n, and connect your phone with **usb wire please**`do not use type-c. I was struggling with jailbreak on my m1 MacBook, and after I figured out type-c wire can't turn your device into DFU mode.`\n\nThen it will turn your phone into recovery mode. If you are using a mac, please close the Finder(if so) and go back to the checkra1n. And next, turn your phone into DFU mode.\n\nThere will be instructions on the screen, if there is any problem, please use Google!\n\n## Expand\n\n*This is what I want to talk about today actually...*\n\nRecently I found a project called [SandCastle](https://github.com/corellium/projectsandcastle), the project page is [here](https://projectsandcastle.org).\n\nIt can load Android, Linux and other systems into your iPhone. However, it only works best on iPhone 7/7s. I tried it and I successfully loaded Linux inside my iPhone 7s. There are many issues, please follow[ this](https://github.com/corellium/projectsandcastle/pull/41) instruction, and be mindful of the script inside.\n\nAfter a struggle, I did the linux on my phone. However, the android was not successful. It both booted, but Android's nand file seems to have some problem when it starts loading. And I didn't test linux since it didn't start the GUI memu.\n\nIt was still interesting, using Checkra1n's pongo shell to do operations on the XNU kernel. Then I started to think that I should also add support on iOS for the Booking OS. One of the project ideas is to create a union hardware world, so if it is possible, I'll try...\n","tags":["Experience & Guide","Projects & Tools","Thoughts & ideas"],"categories":["Apple","Operating System","Projects","iOS Revers","iOS","Booking OS"]},{"title":"Midi Transform","url":"/2021/01/13/","content":"\n# Midi-transform\nA python script can transcript MIDI to json format\n\n<!-- more -->\n\nthe out file format will like this\n\n```json\n{\"songNotes\": [{\"time\": 0, \"key\": \"1Key0\"}]}\n```\ntime: normal time * 1000\nkey: 1Key0-1Key14\n\n\nBasically it transforms into this format then you can play inside `Player.lua` on your phone. Need a tool E.G. Autotouch on your phone to play the script.\n\n### Usage\n\n```\nusage: Sky [-h] [-n NAME] [-r NRANGEC] [-o OUT] [-a ALL]\n\nA little tool for script trans.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NAME, --name NAME  input file name(optional)\n  -r NRANGEC, --range NRANGEC\n                        The range of file(not suggest to use)\n  -o OUT, --out OUT     Special out file name(default *.mid.txt)\n  -a ALL, --all ALL     Output all the range of file\n```\n\n### Develop\n\nI spend lots of time on this project for experince, because I want to make it work better.\n","tags":["Projects & Tools"],"categories":["Little Projects","Midi transform","Programing Language","Python"]},{"title":"CrackerXI+ - A easy to use tool for ipa decrypt","url":"/2020/11/10/","content":"\n# CrackerXI+\n\n> A easy to use tool for ipa decrypt\n\n<!-- more -->\n\n![crakcer](/images/2021/cracker.png)\n"},{"title":"Online Desktop","url":"/2020/11/09/","content":"\n## [Online-Desktop](https://github.com/Jesse-0x/Online-Desktop)\n\nA online KDE Desktop website can use for work\n\n\n\n<!-- more -->\n\n![image](/images/Online-Desktop/Online-Desktop.png)\n\n\n\nThis is a Desktop use docker, KDE neon official docker image and GUI memu, also x11vnc, and[ noVNC](https://github.com/novnc/noVNC)https://github.com/novnc/noVNC)\n\n### Quick start\n\nI was applying it to heroku, so please change the $PORT following files in order to run, or give a PORT value.\n\n```\napp/conf.dwebsockify.sh\n```\n\nand start running using docker.\n\n### Example\n\nhttps://online-desktop.herokuapp.com/vnc.html\n\nPlease be patient because it needs at least 2 min to start (the file was over large.)\n\nand click the setting button on the sidebar, change `Scaling Mode` in to `local scaling`, then click connect botton.\n\n</br>\n\n</br>\n\nBasically, it is a docker container that builds a GUI Desktop and uses VNC service to display it out, and uses noVNC as the client to build it into heroku.\n\n![image](/images/Online-Desktop/build.png)\n\nThis project took me lots of time, every little change required a build, and every build envitually tooks me 2058.7s, which is about 35 minutes... If you like the project, please give me a[ star](https://github.com/Jesse-0x/Online-Desktop)!\n\n### Extra\n\nMore info about docker is [here](/2020/11/04/)\n","tags":["Resource & Share","Projects & Tools"],"categories":["Internet","Web Application","Operating System","Projects","Tools","Linux","Docker","Online Desktop"]},{"title":"Docker","url":"/2020/11/04/","content":"\n# Docker\n\nA good solution toward development\n\n<!-- more -->\n![image](https://www.docker.com/sites/default/files/d8/2019-07/horizontal-logo-monochromatic-white.png)\nMany people said Docker is gonna change the world since its 2013 release, but what has actually helped?\n\n## 0x01 Develop\n\n### Environment\n\nOne big problem for development is environment configuration. Every computer uses' environment is different. If the program can run under this environment, we can't be sure it will run under another environment.\n\nMust make sure the operating system's settings and different libraries are installed. For example, in order to run a python program, a user must have a python engine, and different dependencies. It also takes time, requires updating, is difficult, and has a bunch of different problems.\n\n### Virtual Machine\n\nSo Virtual Machine is a solution to install with the environment. It allows you to run an OS inside another os. Such as running Windows in mac. Facing the OS, Virtual Machine is a normal file, not gonna affect anything.\n\n**However,** it requires much much more resources than actually the program needed. Because an OS also runs other programs. Also other OS level steps can't skip, e.g login. takes a long time to boot, a large disk file...\n\n### LXC(Linux Containers)\n\nBecause of Virtual Machine's problems, Linux developed Linux Containers. It is **not a full operating system**, it is more like a protection. Quartering the process to the program. Since the Containers is a process, it boots faster, does not require many resources, small size, and more.\n\nIt is like a lite Virtual Machine that can provide a Virtual environment with less requirement.\n\n## 0x02 Docker\n\nDocker is a package for Linux Containers, it provides a more easy API to the Containers, and the most popular solution for LXC.\n\nDocker is verrrrry easy to use, run and control. And a docker image is also easy to duplicate, share, edit and manage, just like a code.\n\n### Installation\n\nYou can follow the instruction [here](https://www.docker.com/get-started)\n\nI installed docker with brew\n\n```bash\nbrew install homebrew/cask/docker\n```\n\n### Usage\n\n```\nUsage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nOptions:\n      --config string      Location of client config files (default\n                           \"/Users/jesse/.docker\")\n  -c, --context string     Name of the context to use to connect to the\n                           daemon (overrides DOCKER_HOST env var and\n                           default context set with \"docker context use\")\n  -D, --debug              Enable debug mode\n  -H, --host list          Daemon socket(s) to connect to\n  -l, --log-level string   Set the logging level\n                           (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\")\n                           (default \"info\")\n      --tls                Use TLS; implied by --tlsverify\n      --tlscacert string   Trust certs signed only by this CA (default\n                           \"/Users/jesse/.docker/ca.pem\")\n      --tlscert string     Path to TLS certificate file (default\n                           \"/Users/jesse/.docker/cert.pem\")\n      --tlskey string      Path to TLS key file (default\n                           \"/Users/jesse/.docker/key.pem\")\n      --tlsverify          Use TLS and verify the remote\n  -v, --version            Print version information and quit\n\nManagement Commands:\n  builder     Manage builds\n  buildx*     Docker Buildx (Docker Inc., v0.7.1)\n  compose*    Docker Compose (Docker Inc., v2.2.1)\n  config      Manage Docker configs\n  container   Manage containers\n  context     Manage contexts\n  image       Manage images\n  manifest    Manage Docker image manifests and manifest lists\n  network     Manage networks\n  node        Manage Swarm nodes\n  plugin      Manage plugins\n  scan*       Docker Scan (Docker Inc., v0.14.0)\n  secret      Manage Docker secrets\n  service     Manage services\n  stack       Manage Docker stacks\n  swarm       Manage Swarm\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  build       Build an image from a Dockerfile\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  exec        Run a command in a running container\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  images      List images\n  import      Import the contents from a tarball to create a filesystem image\n  info        Display system-wide information\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  login       Log in to a Docker registry\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n\nRun 'docker COMMAND --help' for more information on a command.\n\nTo get more help with docker, check out our guides at https://docs.docker.com/go/guides/\n\n```\n\nsome common command:\n\n```bash\ndocker pull ubuntu:20.04 #pull ubuntu image LTS20.04\n```\n\nMore image can be fount at [here](https://hub.docker.com)\n\n```bash\ndocker run -it ubuntu /bin/bash #run bash on the ubuntu image you just pulled\n```\n\n-i: interactive\n\n-t: terminal\n\n-d: run in backstage\n\n/bin/bash: command you want to run\n\n```bash\n$ exit\n```\n\nif you want to exit the image, type in exit.\n\n```bash\ndocker ps #all the containers\ndocker start 123456abcd #start stopped image 123456abcd\ndocker stop 123456abcd #stop image 123456abcd\ndocker restart 123456abcd #restart 123456abcd\ndocker exec 123456abcd #attach to an image run in backstage(-d)\ndocker export 123456abcd #export 123456abcd\ndocker rm 123456abcd #remove an container\ndocker images #list all the images\n```\n\n## 0x03\n\n### Dockerfile\n\nDevelopment in docker can use `Dockerfile` to create an image.\n\n```\nFROM ubuntu:20.04 #means the image build on\nCOPY . /app       #Copy current folder in to image /app\nWORKDIR /app\t\t\t#set work inside /app, like cd /app\nRUN apt update\t\t#run command inside image\nEXPOSE 1234\t\t\t\t#expose port 1234, allow outside to connect the 1234 port inside a docker.\n```\n\n### Build\n\nAnd now can build the image using `docker image build .`\n\nAnd now use `docker image ls` to see the image you just built. \n\n### Run\n\nrun with `docker container run`\n\n```bash\ndocker container run -p 1234:1234 -it ubuntu /bin/bash\n```\n\n-i: interactive\n\n-t: terminal\n\n-p: port to reflect\n\n-d: run in backstage\n\n/bin/bash: command you want to run\n\n### Stop\n\nNow you can use `ctrl + d` or type in exit to exit the container.\n\nYou also can use `docker container kill` to kill the container.\n\nps: if you stopped the container, it will not be remove, please use `docker container rm <containerID>` to remove it( I like to use `docker container rm $(docker container ls -a -q)` to remove every container)\n\n\n\n","tags":["Experience & Guide","Resource & Share"],"categories":["Technology","LXC","Operating System","Tools","Linux","Program Develop","Environment","Docker"]},{"title":"Blog Details","url":"/2020/10/03/","content":"\n# Jesse's Blog\n\n![BLOG](/images/BLOG.png)\n\nA personal blog using hexo and [Education Github Student pack](http://education.github.com).\n\n<!-- more -->\n\nThis is my personal blog, I'll update my\n\n  - Problems & Solution\n  - Experience & Guide\n  - Resource & Share\n  - Projects & Tools\n  - Thoughts & ideas\n\nAs much as I can.\n\nThis website supports online chat using [utterances](https://github.com/utterance) & [Disqus](https://disqus.com), support PWA(Progressive Web Apps), website information analyzes use google and more.\n\nIf you like it, pls give me a <a class=\"github-button\" href=\"https://github.com/Jesse-0x/Jesse-0x.github.io\" data-size=\"large\" data-show-count=\"true\" aria-label=\"Star Jesse-0x/Jesse-0x.github.io on GitHub\">Star</a>!\n\n### Server\n\nServer: Github Pages\n\nDomain, SSL & DNS: [namecheap](https://www.namecheap.com/)\n\nWebsite: [Jessse.me](https://jessse.me)\n\nExtra: [Education Github Student pack](http://education.github.com)\n\n\n\n### Web application\n\nMain language: [Node.Js 17](https://nodejs.org/)\n\nFramework: [Hexo](https://github.com/hexojs/hexo) \n\nTheme: [Stun theme](https://github.com/liuyib/hexo-theme-stun/blob/master/README_en-US.md)\n\nChat: [utterances](https://github.com/utterance)\n\nBackup Chat: [Disqus](https://disqus.com)\n\n| Node package:             |\n| ------------------------- |\n| hexo-wordcount            |\n| hexo-filter-github-emojis |\n| hexo-generator-feed       |\n| hexo-next-pwa             |\n| hexo-generator-sitemap    |\n| hexo-generator-search     |\n| hexo-wordcount            |\n\n\n\n### Licsence & copyright\n\n[Hexo is licensed under the MIT License](https://github.com/hexojs/hexo/blob/master/LICENSE)\n\n[Theme Stun is licensed under the MIT License](https://github.com/liuyib/hexo-theme-stun/blob/master/LICENSE)\n\nBlog top background: ©Mikael Gustafsson\n\nBlog main page background: ©Jesse Gong\n\n<script async defer src=\"https://buttons.github.io/buttons.js\"></script>\n","tags":["Projects & Tools","Web Application"],"categories":["Internet","Web Application","Projects","Tools","Programing Language","Blog","Github","Nodejs"]},{"title":"Jesse's Blog","url":"/2020/09/30/","content":"\n![BLOG](/images/BLOG.png)\n\nFinally!\n\nIf you can read this, it means my blog started.\n\n<!-- more -->\n\nThis is my personal blog, and it uses [hexo](https://github.com/hexojs/hexo) as my blog framework, and [Stun theme](https://github.com/liuyib/hexo-theme-stun/blob/master/README_en-US.md).\n\nThe server I'm using is github pages, and [namecheap](https://www.namecheap.com/) as my domain&DNS server. GitHub student pack is very useful, it provides github pro, which allows me to have my own [domain](https://jessse.me), and free SSL certificate.\n\nThere was some problems I encountered, but I'll explain in next blog~\n\n\n\nYour advice is most welcome, I'll do my best!\n\n\n\nThank you and wish you a best day!\n","tags":["Projects & Tools","Web Application"],"categories":["Internet","Web Application","Projects","Tools","Programing Language","Blog","Github","Nodejs"]},{"title":"Experience with Blender","url":"/2020/05/07/","content":"\n![Blender](/images/blender/Blender.png)\n\nLast month my Art teacher assigned me sketchbook homework, and I have always wanted to try 3D modeling by myself. I watched this [YouTuber's](https://www.youtube.com/user/AndrewPPrice) video, and made the thing above.\n\n<!-- more -->\n\nI had a 3D printer in my home since I was in 5th grade, and I also printed lots of things. Before, all the 3D models was downloaded from internet, and this is the first 3D object made myself (even though I just follow the video :joy:)<br><br>\n\n### Blender\n\n[Blender](https://www.blender.org/) is a powerful open source tool made by python, and contains many features. Including\n\n##### [Rendering](https://www.blender.org/features/rendering/)\n\nCreate jaw-dropping renders thanks to Cycles, high-end production path tracer.\n\n##### [Modeling](https://www.blender.org/features/modeling/)\n\nSculpting, retopology, modeling, curves. Blender’s modeling toolset is extensive.\n\n##### [Sculpting](https://www.blender.org/features/sculpting/)\n\nDigital sculpting tools provide the power and flexibility required in several stages of the digital production pipeline.\n\n##### [Animation & Rigging](https://www.blender.org/features/animation/)\n\nDesigned for animation, Blender is being used for award-winning shorts and feature films.\n\n##### [Grease Pencil](https://www.blender.org/features/grease-pencil/)\n\nPush the boundaries of Story Art and 2D concept design, right in Blender’s 3D viewport.\n\n##### [VFX](https://www.blender.org/features/vfx/)\n\nFrom camera and object motion tracking to masking and compositing, you can “fix it in post”.\n\n##### [Simulation](https://www.blender.org/features/simulation/)\n\nFeaturing industry-standards libraries like Bullet and MantaFlow, Blender offers powerful simulation tools.\n\n##### [Pipeline](https://www.blender.org/features/pipeline/)\n\nIntegration with multiple pipeline tools is pivotal in many productions.\n\n##### [Video Editing](https://www.blender.org/features/video-editing/)\n\nThe Video Editor offers a range of basic yet very efficient tools.\n\n##### [Scripting](https://www.blender.org/features/scripting/)\n\nFeaturing an extensive Python API, every tool is available for scripting and customization\n\n##### [Interface](https://www.blender.org/features/interface/)\n\nBecause of its custom architecture, Blender’s UI, window layout and shortcuts can be fully customized.\n\n （reference: https://www.blender.org/features/)\n\n <br>\t<br>And one of my favorite things about this software is written in python. It allows people to add plug-in into the application.\n\nFor example, using a plug-in convert Minecraft map into 3D models (I don't play minecraft so if there is any problems please ignore)\n\n![untitled](/images/blender/untitled.png)\n\n--------\n\nEventually, there are also many different 3D modeling software\n\nE.g.C4D, TinkerCAD, OnShape, SolidWorks(I saw My father using this) and more. Compared to these software, blender is easier to start using. It is also free, open source, and provides plenty of professional functions and units. Blender also can make videos, calculate simulation, Animation and more.\n\n(More picture of my doughnut:doughnut:)\n\n![untitled](/images/blender/untitledc.png)\n\n(Different lighting point)\n\n![untitled](/images/blender/untitled.jpg)\n\n\n\n\n\n","tags":["Experience & Guide"],"categories":["Technology","3D Modeling","Tools","Blender"]},{"title":"A node program using express","url":"/2020/01/10/","content":"\n[Node.js](https://nodejs.org/)® is a JavaScript runtime built on [Chrome's V8 JavaScript engine](https://v8.dev/), and it is Founded by © OpenJS Foundation. Many web applications use it, such as LinkedIn, Netflix, PayPal, NASA and more.\n\n<!-- more -->\n\n## Node.js running **Environment**\n\nMy device is a MacBook Pro Late 2012, and installed Xcode & Developer Command Line tools.\n\n### Install Xcode & Command Line Tools\n\nXcode can be installed from the [Mac App Store](https://apps.apple.com/us/app/xcode/id497799835), or from [Apple Developer](https://developer.apple.com/download) download Xcode beta (Need Apple Developer account).\n\nAfter installing Xcode please run at least one time in order to agree to. the agreement.\n\nCommand Line tools can be installed from Terminal\n\n```bash\nxcode-select --install\n```\n\nTips: If u meet any problems, please check the following guide.\n\n\n\n### Install HomeBrew\n\n[Brew](http://brew.sh)\n\n`The Missing Package Manager for macOS (or Linux)`\n\n`Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn´t include with macOS. It can also install software not packaged for your Linux distribution to your home directory without requiring sudo.`(Source `man brew`)\n\nHomebrew require Xcode & Command Line Tools, after installation, please run the following command inside macOS Terminal or linux terminal:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n(Please take [this](https://brew.sh) as the standard)\n\nTips: If u meet any problems, please check the following guide.\n\n\n\n### Install Node\n\nAfter both Command Line Tools & HomeBrew installed, please run\n\n```bash\nbrew install node\n```\n\nIt will automatically install node.\n\nIf you want to check, you can run `node -v` to see the version of your node.\n\n\n\n## Using Node\n\n### Initialization Node\n\nNpn is a javascript package manager made for node.\n\nopen a directory you want to work with, and open it by type in`cd` + `the name of your directory`\n\nand then Open terminal, type in\n\n```bash\nnpm init\n```\n\n it will help you to create a directory using node, just follow all the step show on the terminal( Normally just type enter until finish)\n\nE.G I created a directory called `Lesson`, I need to type in \n\n```bash\ncd Lesson\n```\n\n```bash\nnpm init\n```\n\n### Node Directory\n\nAfter Initialization, the directory should have a file called `package.json`, and now you should type in \n\n```bash\nnpm install express --save\n```\n\nThis means it will install express and save to `package.json` file,  package.json is like the main configuration of your node project.\n\n### Simple Example of using node\n\nType in the following to create a `index.js` file, as the main program of the node\n\n```bash\ntouch index.js\n```\n\nOpen the `index.js` file inside your node directory, Import express modules, and give it to variable `express `\n\n```js\nvar express = require('express');\n```\n\nCall express, at this moment it is a function. When it is called without a parameter, it will return an express, and give it to the `app`.\n\n```js\nvar app = express();\n```\n\nBasically every time I use `app.*` equals using `express`.\n\n</br>\n\nNow this `app` includes many methods, including `get`, `post`, `put`/`patch`, `delete`. Now using `get` method, point out `/` and give a `handler` function\n\nthis handler will receive req and res these two objects, they are the request for `request` & `response`. And this request will include all the information sent out by the browser, such as `query`,` body` and `headers`. They all can be get from `req` object\n\n</br>\n\n\n\nFor res objects, we don't read messages from it, but we use it to output information toward the browser.. For example, header information. E.g using `#send` method, send a string to browser\n\n```js\napp.get('/', function (req, res) {\n  res.send('Hello World');\n}); \n```\n\n\n\n</br>\n\n\n\nAfter we define the actions of the app, make it listen to the local port (3000 at this point). The second function here is the Callback function, it will tell the listen action is finished.\n\n```js\napp.listen(3000, function () {\n  console.log('app is listening at port 3000');\n});\n```\n\n\n\n#### Full Script:\n\n```js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World');\n}); \n\napp.listen(3000, function () {\n  console.log('app is listening at port 3000');\n});\n```\n\nand after editing the index.js file, save it, and run it\n\n```bash\nnode index.js\n```\n\nNow open your browser, type in http://localhost:3000/ to see your website, and it should look like this:\n\n![Lesson](/images/Node/Lesson.png)\n\n### Problems might encounter\n\nWhen you start your node program, it might show something like this:\n\n```bash\nnode:events:*\n      throw er; // Unhandled 'error' event\n      ^\n\nError: listen EADDRINUSE: address already in use :::3000\n.......\n{\n  code: 'EADDRINUSE',\n  errno: -48,\n  syscall: 'listen',\n  address: '::',\n  port: 3000\n}\n\n```\n\nThis means your \"3000\" port already been used, you can change 3000 in this  `app.listen(3000, ...` in to another number that don't have this problem, such as 4000\n","tags":["Experience & Guide"],"categories":["Apple","Internet","Web Application","Programing Language","JavaScript"]},{"title":"My first C program","url":"/2019/11/10/","content":"\n<!-- more -->\n\n### 1-1 basic C info\n\n1. Every C language needs to have a **main()** function. Program begins with **main()** .\n\n2. **/\\* \\*/** use a description program.\n3. **printf()** used to print to the screen . **printf()** will in the stdio.h header file say.\n4. **stdio.h** is a header file (Standard input and output header file), **#include** is a Preprocessing command,used in get in the header file.When translated meet **printf()** function,if do not find **stdio.h** header file ,it will have translated wrong.\n5. **return 0;** use to get out of the program.\n\n#### Code\n\nmain()\n\n/*  */\n\nprintf()\n\nstdio.h\n\n\\#include —— #include <stdio.h>\n\nreturn 0;\n\n#### Program\n\n```c\n#include <stdio.h>\n\nint main(){\n  /* My first C program */\n  printf(\"Hello, World! \\n\");\n  return 0;\n}\n```\n\n","tags":["Experience & Guide"],"categories":["Programing Language","C"]}]